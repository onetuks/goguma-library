sonar {
    def envFile = file('../.env')
    if (envFile.exists()) {
        def env = new Properties()
        envFile.withReader { reader ->
            env.load(reader)
        }

        properties {
            property("sonar.host.url", "http://localhost:9000")
            property("sonar.login", env['SONAR_TOKEN'])
            property("sonar.sourceEncoding", "UTF-8")
            property("sonar.projectKey", "goguma-bookstore")
            property("sonar.projectName", "goguma-bookstore")
            property("sonar.converage.jacoco.xmlReportPaths",
                    "build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml")
        }
    } else {
        println ".env file not exists"
    }
}

def jacocoExclude = List.of(
        "**/Q*",
        "**/error/*",
        "**/exception/*",
        "**/config/*",
        "**/global/*",
        "**/controller/*",
        "**/model/*",
        "**/entity/*",
        "**/dto/*",
        "**/vo/*",
        "**/enums/*",
        "**/api/*",
        "**/coreauth/*",
        "**/*Application.class"
)

allprojects {
    if (!project.name.contains('api')) {
        apply plugin: 'org.sonarqube'

        sonar {
            properties {
                property("sonar.sources", "src/main/java")
                property("sonar.tests", "src/test/java")
                property("sonar.coverage.exclusions",
                        jacocoExclude.stream().map {
                            it.replace('/*', '/**')
                        }.toList().join(','))
            }
        }
    }
}